import { Metadata } from 'dedalus-labs-mcp/tools/types';
import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Dedalus from 'dedalus-labs';
export declare const metadata: Metadata;
export declare const tool: Tool;
export declare const handler: (client: Dedalus, args: Record<string, unknown> | undefined) => Promise<import("dedalus-labs-mcp/tools/types").ToolCallResult>;
declare const _default: {
    metadata: Metadata;
    tool: {
        [x: string]: unknown;
        name: string;
        inputSchema: {
            [x: string]: unknown;
            type: "object";
            properties?: {
                [x: string]: unknown;
            } | undefined;
            required?: string[] | undefined;
        };
        title?: string | undefined;
        description?: string | undefined;
        outputSchema?: {
            [x: string]: unknown;
            type: "object";
            properties?: {
                [x: string]: unknown;
            } | undefined;
            required?: string[] | undefined;
        } | undefined;
        annotations?: {
            [x: string]: unknown;
            title?: string | undefined;
            readOnlyHint?: boolean | undefined;
            destructiveHint?: boolean | undefined;
            idempotentHint?: boolean | undefined;
            openWorldHint?: boolean | undefined;
        } | undefined;
        _meta?: {
            [x: string]: unknown;
        } | undefined;
    };
    handler: (client: Dedalus, args: Record<string, unknown> | undefined) => Promise<import("dedalus-labs-mcp/tools/types").ToolCallResult>;
};
export default _default;
//# sourceMappingURL=create-chat.d.ts.map